spring.application.name=nrdp-gateway
server.port=8004

eureka.client.serviceUrl.defaultZone=http://server1:8000/eureka/,http://server2:8001/eureka/
eureka.instance.health-check-url=http://localhost:${server.port}/actuator/health
eureka.instance.status-page-url=http://localhost:${server.port}/actuator/info
eureka.instance.home-page-url=http://localhost:${server.port}/

#注册到Eureka Server上的是IP
#eureka.instance.prefer-ip-address=true

# 表示设置属性变化后不使用密码验证
management.security.enabled=false
#暴露actuator的所有端点
management.endpoints.web.exposure.include=*
#health endpoint是否必须显示全部细节。默认情况下, /actuator/health 是公开的，并且不显示细节
management.endpoint.health.show-details=always

#false=通过参数配置方式来禁用Eureka对Ribbon服务实例的维护实现。
ribbon.eureka.enabled=true

zuul.ribbon.eager-load.enabled=true
#当隔离策略为thread时，线程隔离策略作用于所有路由，HystrixThreadPoolKey默认为RibbonCommand,意味着所有路由的HystrixCommand都会在相同的Hystrix线程中执行
zuul.ribbon-isolation-strategy=thread
#如果想要让每个路由使用独立的线程池，使用以下配置 -> 这样HystrixThreadPoolKey将与路由的服务Id标识相同，
zuul.threadPool.useSeparateThreadPools=true
#如果想要为HystrixThreadPoolKey加前缀，可以加上threadPoolKeyPrefix属性
#zuul.threadPool.threadPoolKeyPrefix=prefix-
# /api-member和/api-order就是路由前缀
zuul.routes.hbase.path=/hbase-api/**
zuul.routes.hbase.serviceId=
#发送到提供的服务端时，要不要路由前缀，false不要
zuul.routes.hbase.stripPrefix=false
zuul.routes.kafka.path=/kafka-api/**
zuul.routes.kafka.serviceId=
zuul.routes.kafka.stripPrefix=false

zuul.routes.nrdp-service1.path=/service1-api/**
zuul.routes.nrdp-service1.serviceId=
zuul.routes.nrdp-service1.stripPrefix=false
#通过服务连接配置中心
spring.cloud.config.profile=dev
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-server

#配置文件获取失败快速返回
spring.cloud.config.failFast=true
spring.cloud.config.retry.initial-interval=1000
spring.cloud.config.retry.max-attempts=3
spring.cloud.config.retry.multiplier=1
spring.cloud.config.retry.max-interval=1000

#tomcat最大线程数
server.tomcat.max-threads=1000
#当最大线程数满了，允许排队的最大队列长度
server.tomcat.accept-count=1000
#tomcat最大能并发处理请求的线程数
server.tomcatmax-connections=1000

spring.mvc.view.prefix=classpath:/templates/
spring.mvc.view.suffix=.html

#在http消息请求头中，使用此属性表示具体请求中的媒体类型信息，以下表示返回的类型是文本类型，而这个文本又是html格式的
spring.thymeleaf.content-type=text/html
#是否启用mode缓存
spring.thymeleaf.cache=false
#应用于mode的mode模式
spring.thymeleaf.mode=LEGACYHTML5
